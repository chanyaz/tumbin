apply plugin: 'com.android.application'
apply plugin: 'com.vanniktech.android.apk.size'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'

// Manifest version
def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

def packageName = "com.sakuna63.tumbin"

def minSdk = project.hasProperty("minSdk") ? minSdk.toInteger() : 17

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    dataBinding {
        enabled = true
        version = '2.2.0'
    }

    dexOptions {
        // TODO: Diable on CI
        preDexLibraries = true
    }

    defaultConfig {
        applicationId packageName
        minSdkVersion minSdk
        targetSdkVersion 25
        versionCode 101 // versionMajor * 100 + versionMinor * 10 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile rootProject.file("release.keystore")
            storePassword System.getenv("KSTOREPWD")
            keyAlias "droidkaigi"
            keyPassword System.getenv("KEYPWD")
        }
    }

    buildTypes {
        all {
            buildConfigField "String", "CALLBACK_URL", "${CALLBACK_URL}"
            buildConfigField "String", "CONSUMER_KEY", "${CONSUMER_KEY}"
            buildConfigField "String", "CONSUMER_KEY_SECRET", "${CONSUMER_KEY_SECRET}"
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled true
            shrinkResources false
            testCoverageEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "TOKEN_DEBUG", "${TOKEN_DEBUG}"
            buildConfigField "String", "TOKEN_SECRET_DEBUG", "${TOKEN_SECRET_DEBUG}"
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            testCoverageEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        all {
            manifestPlaceholders = [callbackUrl:"${CALLBACK_URL}"]
        }
        dev {
            applicationId "${packageName}.develop"
        }
        prod {

        }
    }

    def ignoreVariants = ['debug': 'prod', 'release': 'dev']
    variantFilter { variant ->
        def buildTypeName = variant.buildType.name
        def flavorName = variant.flavors.get(0).name
        if (ignoreVariants[buildTypeName].equals(flavorName)) {
            variant.setIgnore(true)
        }
    }

    lintOptions {
        lintConfig rootProject.file("lint.xml")
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
    }
}

def supportVersion = '25.1.0'
def rxLifecycleVersion = '1.0'
def fragmentArgsVersion = '3.0.2'
def retrofit2Version = '2.1.0'
def okHttp3Version = '3.5.0'
def kvsSchemaVersion = '5.0.1'
def daggerVersion = '2.8'
def stethoVersion = '1.4.1'
def powerMockVersion = '1.6.6'

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${supportVersion}"
    compile "com.android.support:recyclerview-v7:${supportVersion}"
    compile "com.android.support:design:${supportVersion}"
    compile "com.android.support:support-annotations:${supportVersion}"
    compile "com.android.support:customtabs:${supportVersion}"

    compile 'com.google.android.exoplayer:exoplayer:r2.1.1'

    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"

    compile 'io.reactivex:rxjava:1.2.3'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile "com.trello:rxlifecycle:${rxLifecycleVersion}"
    compile "com.trello:rxlifecycle-components:${rxLifecycleVersion}"

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@jar'

    compile "com.squareup.retrofit2:retrofit:${retrofit2Version}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofit2Version}"
    compile "com.squareup.retrofit2:converter-jackson:${retrofit2Version}"
    compile "com.squareup.okhttp3:okhttp:${okHttp3Version}"

    compile 'se.akerfeldt:okhttp-signpost:1.1.0'
    compile 'oauth.signpost:signpost-core:1.2.1.2'

    compile 'com.tumblr:bookends:1.0.0@aar'

    kapt "com.android.databinding:compiler:$android.dataBinding.version"
    compile "com.hannesdorfmann.fragmentargs:annotation:${fragmentArgsVersion}"
    kapt "com.hannesdorfmann.fragmentargs:processor:${fragmentArgsVersion}"
    compile "com.rejasupotaro:kvs-schema:${kvsSchemaVersion}"
    kapt "com.rejasupotaro:kvs-schema-compiler:${kvsSchemaVersion}"
    compile "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    debugCompile "com.squareup.okhttp3:logging-interceptor:${okHttp3Version}"
    debugCompile "com.facebook.stetho:stetho:${stethoVersion}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${stethoVersion}"
    debugCompile 'com.uphyca:stetho_realm:2.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.powermock:powermock-module-junit4:${powerMockVersion}"
    testCompile "org.powermock:powermock-module-junit4-rule:${powerMockVersion}"
    testCompile "org.powermock:powermock-classloading-xstream:${powerMockVersion}"
    testCompile "org.powermock:powermock-api-mockito:${powerMockVersion}"
    testCompile "org.robolectric:robolectric:3.1.4"
}

kapt {
    generateStubs = true
}
